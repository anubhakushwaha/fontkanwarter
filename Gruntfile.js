
module.exports = function(grunt) {

  var date = new Date();
  var minute = date.getMinutes();
  var hour = date.getHours();
  var day = date.getDate();
  var month = date.getMonth();
  var year = date.getFullYear();

  var date = day + "-" + month + "-" + year + " " + hour + "-" + minute;

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    webfont: {
      O2: {
        src: 'o2-sdk/exported/*.svg',
        dest: 'o2-sdk/generated/' + date,
        options: {
          codepointsFile: 'o2-sdk/fontMapping.json',
          types: 'eot,woff2,woff,ttf,svg',
          fontFilename: 'zomatoO2',
          startCodepoint: 33,
	        font: 'zomatoO2',
          autoHint: false,
          callback: function(filename, types, glyphs, hash) {
            generate_new_html('o2-sdk', filename);
          }
        }
      },
      zapps: {
        src: 'z-apps/exported/*.svg',
        dest: 'z-apps/generated/' + date,
        options: {
          codepointsFile: 'z-apps/fontMapping.json',
          types: 'eot,woff2,woff,ttf,svg',
          fontFilename: 'zombatswapRegular',
          startCodepoint: 33,
	        font: 'zombatswapRegular',
          autoHint: false,
          callback: function(filename, types, glyphs, hash) {
            generate_new_html('z-apps', filename);
          }
        }
      },
       zdroid: {
        src: 'zdroid/exported/*.svg',
        dest: 'zdroid/generated/' + date,
        options: {
          codepointsFile: 'zdroid/fontMapping.json',
          types: 'eot,woff2,woff,ttf,svg',
          fontFilename: 'zombatswapRegular',
          startCodepoint: 33,
          autoHint: false,
          callback: function(filename, types, glyphs, hash) {
            generate_new_html('zdroid', filename);
          }
        }
      },
      zmerchant: {
        src: 'z-merchant/exported/*.svg',
        dest: 'z-merchant/generated/' + date,
        options: {
          codepointsFile: 'z-merchant/fontMapping.json',
          types: 'eot,woff2,woff,ttf,svg',
          fontFilename: 'font',
          startCodepoint: 33,
          autoHint: false,
          callback: function(filename, types, glyphs, hash) {
            generate_new_html('z-merchant', filename);
          }
        }
      },
      zweb: {
        src: 'z-web/exported/*.svg',
        dest: 'z-web/generated/' + date,
        options: {
          codepointsFile: 'z-web/fontMapping.json',
          types: 'eot,woff2,woff,ttf,svg',
          fontFilename: 'font',
          startCodepoint: 33,
          autoHint: false,
          font: 'zombatsregular',
          fontFilename: 'zombatsregular-webfont-web',
          styles: 'font',
          order: 'eot,woff2,woff,ttf,svg',
          engine: 'node',
          callback: function(filename, types, glyphs, hash) {
            generate_new_html('z-web', filename);
          }
        }
      }
    }   
  });
  
  grunt.loadNpmTasks('grunt-webfont');

  // function to edit current html to generate new more user-friendly html.
  // cdir -> current directory of the task
  // filename -> name of the file that is generated by webfont
  function generate_new_html(cdir, filename) {

    // load json mapping of icons
    var json_data = grunt.file.readJSON(cdir + '/fontMapping.json');

    var fs = require('fs');
    grunt.log.writeln('creating ./' + cdir + '/generated/' + date + '/' + filename + '_new.html');

    // load the old html file
    var file = grunt.file.read('./' + cdir + '/generated/' + date + '/' + filename + '.html');

    // add new css to generate icon cards
    var style = ".new {\n\
                    max-width: 100%;\n\
                    display: -webkit-box;\n\
                    width: 20%;\n\
                    float: left;\n\
                    display: -webkit-flex;\n\
                    display: -ms-flexbox;\n\
                    display: flex;\n\
                    margin: 5px 30px;\n\
                    text-align: center;\n\
                    -webkit-box-orient: vertical;\n\
                    -webkit-box-direction: normal;\n\
                    -webkit-flex-direction: column;\n\
                    -ms-flex-direction: column;\n\
                    flex-direction: column;\n\
                    border-radius: .28571429rem;\n\
                    box-shadow: 0 1px 3px 0 #D4D4D5,0 0 0 1px #D4D4D5;\n\
                    -webkit-transition: box-shadow .1s ease,-webkit-transform .1s ease;\n\
                    transition: box-shadow .1s ease,-webkit-transform .1s ease;\n\
                    transition: box-shadow .1s ease,transform .1s ease;\n\
                    transition: box-shadow .1s ease,transform .1s ease,-webkit-transform .1s ease;\n\
                  }\n\
                  i{\n\
                    width: 100% !important;\n\
                    font-size: 25px\n\
                  }\n\
                  input {\n\
                    line-height: 1.2142em;\n\
                    text-align: center;\n\
                    padding: .67861429em 1em;\n\
                    border: 1px solid rgba(34,36,38,.15);\n\
                    border-radius: .28571429rem;\n\
                    -webkit-transition: box-shadow .1s ease,border-color .1s ease;\n\
                    transition: box-shadow .1s ease,border-color .1s ease;\n\
                    box-shadow: none;\n\
                    height: 20px;\n\
                  }";

    file = file.replace('</style>', style + '</style>');

    // this transition removes icon on hover so remove it.
    file = file.replace('-webkit-transform:scale(1.5);', '');
    file = file.replace('transform:scale(1.5);', '');

    // we won't be using the by default grid layout so no need of icons class
    file = file.replace('class="icons"', '');

    // looping over json mapping and updating old html conents
    for(css_class in json_data) {
      // converting ASCII codes to html hex codes
      json_data[css_class] = '&amp;&#35;' + json_data[css_class];

      // this is what we find in old html
      var to_find = '<div class="icons__item" data-name="' + css_class
                      + '"><i class="icon icon_' + css_class + '"></i> icon_' + css_class + '</div>';

      // adds onclick to div and input to select the html hex on clicking for copying
      // input is readonly
      // appends new css class
      var to_replace = '<div onclick="this.getElementsByTagName(\'input\')[0].click()"'
                        + 'class="icons__item new" data-value="' + json_data[css_class]
                        + '" data-name="' + css_class + '"><i class="icon icon_' + css_class
                        + '"></i> icon_' + css_class + ' <input onClick="this.select();" value="' + json_data[css_class]
                        + '" readonly>' + '</div>';

      // finaly replace old contents :)
      file = file.replace(new RegExp(to_find, 'g'), to_replace);

    }

    // removing extra things
    file = file.replace('<h1>Usage</h1>', '');
    file = file.replace('<pre><code>&lt;i class=&quot;icon icon_<span id="name">name</span>&quot;&gt;&lt;/i&gt;</code></pre>', '');
    file = file.replace('<footer>Generated by', '<footer>Generated by Ashish Kumar Kanwar & Garvit Khatri using ');

    // writing the changes made to new html file
    grunt.file.write('./' + cdir + '/generated/' + date + "/" + filename + "_new" + ".html", file);
  }

};
